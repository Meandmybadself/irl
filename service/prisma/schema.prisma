generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ContactInformation {
  id             Int                        @id @default(autoincrement())
  type           ContactType
  label          String
  value          String
  privacy        PrivacyLevel
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  deleted        Boolean                    @default(false)
  groupContacts  GroupContactInformation[]
  personContacts PersonContactInformation[]
  systemContacts SystemContactInformation[]

  @@index([type])
  @@index([privacy])
  @@map("contact_information")
}

model User {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  password          String
  verificationToken String?
  isSystemAdmin     Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deleted           Boolean  @default(false)
  claims            Claim[]
  people            Person[]

  @@map("users")
}

model Person {
  id                 Int                        @id @default(autoincrement())
  firstName          String
  lastName           String
  displayId          String                     @unique
  pronouns           String?
  imageURL           String?
  userId             Int
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  deleted            Boolean                    @default(false)
  claims             Claim[]
  user               User                       @relation(fields: [userId], references: [id])
  contactInformation PersonContactInformation[]
  groupMemberships   PersonGroup[]

  @@index([userId])
  @@map("people")
}

model System {
  id                 Int                        @id @default(1)
  name               String
  registrationOpen   Boolean                    @default(true)
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  deleted            Boolean                    @default(false)
  contactInformation SystemContactInformation[]

  @@map("systems")
}

model Group {
  id                            Int                       @id @default(autoincrement())
  displayId                     String                    @unique
  name                          String
  description                   String?
  parentGroupId                 Int?
  allowsAnyUserToCreateSubgroup Boolean                   @default(false)
  publiclyVisible               Boolean                   @default(true)
  createdAt                     DateTime                  @default(now())
  updatedAt                     DateTime                  @updatedAt
  deleted                       Boolean                   @default(false)
  contactInformation            GroupContactInformation[]
  invites                       GroupInvite[]
  parentGroup                   Group?                    @relation("GroupHierarchy", fields: [parentGroupId], references: [id])
  childGroups                   Group[]                   @relation("GroupHierarchy")
  people                        PersonGroup[]

  @@index([parentGroupId])
  @@map("groups")
}

model Claim {
  id             Int       @id @default(autoincrement())
  personId       Int
  requestingUser Int
  claimCode      String    @unique
  claimed        Boolean   @default(false)
  claimedAt      DateTime?
  expiresAt      DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deleted        Boolean   @default(false)
  person         Person    @relation(fields: [personId], references: [id])
  user           User      @relation(fields: [requestingUser], references: [id])

  @@map("claims")
}

model GroupInvite {
  id         Int       @id @default(autoincrement())
  groupId    Int
  email      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deleted    Boolean   @default(false)
  accepted   Boolean   @default(false)
  acceptedAt DateTime?
  group      Group     @relation(fields: [groupId], references: [id])

  @@map("group_invites")
}

model SystemContactInformation {
  id                   Int                @id @default(autoincrement())
  systemId             Int
  contactInformationId Int
  contactInformation   ContactInformation @relation(fields: [contactInformationId], references: [id])
  system               System             @relation(fields: [systemId], references: [id])

  @@unique([systemId, contactInformationId])
  @@map("system_contact_information")
}

model PersonContactInformation {
  id                   Int                @id @default(autoincrement())
  personId             Int
  contactInformationId Int
  contactInformation   ContactInformation @relation(fields: [contactInformationId], references: [id])
  person               Person             @relation(fields: [personId], references: [id])

  @@unique([personId, contactInformationId])
  @@map("person_contact_information")
}

model GroupContactInformation {
  id                   Int                @id @default(autoincrement())
  groupId              Int
  contactInformationId Int
  contactInformation   ContactInformation @relation(fields: [contactInformationId], references: [id])
  group                Group              @relation(fields: [groupId], references: [id])

  @@unique([groupId, contactInformationId])
  @@map("group_contact_information")
}

model PersonGroup {
  id       Int     @id @default(autoincrement())
  personId Int
  groupId  Int
  isAdmin  Boolean @default(false)
  group    Group   @relation(fields: [groupId], references: [id])
  person   Person  @relation(fields: [personId], references: [id])

  @@unique([personId, groupId])
  @@map("person_groups")
}

enum ContactType {
  EMAIL
  PHONE
  ADDRESS
  URL
}

enum PrivacyLevel {
  PRIVATE
  PUBLIC
}
